clients <- clients %>%
mutate(age = (birth_number+19000000-20211110)%/%10000)
####
#women <- dplyr::filter(clients, gender == "F")
#men <- dplyr::filter(clients, gender == "M")
#print("Successful loans")
#print(summarise(loans_successful,avgAmount = mean(amount), avgTime = mean(duration), avgPayments = mean(payments)))
#print("Unsuccessful loans")
#print(summarise(loans_unsuccessful,avgAmount = mean(amount), avgTime = mean(duration), avgPayments = mean(payments)))
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
#women <- dplyr::filter(clients, gender == "F")
#men <- dplyr::filter(clients, gender == "M")
#print("Successful loans")
#print(summarise(loans_successful,avgAmount = mean(amount), avgTime = mean(duration), avgPayments = mean(payments)))
#print("Unsuccessful loans")
#print(summarise(loans_unsuccessful,avgAmount = mean(amount), avgTime = mean(duration), avgPayments = mean(payments)))
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
women <- dplyr::filter(clients, gender == "F")
men <- dplyr::filter(clients, gender == "M")
print("Women Stats")
print(summarise(women,avgAge = mean(age), nbWomen = dplyr::n()))
print("Men Stats")
print(summarise(men,avgAge = mean(age), nbMen = dplyr::n()))
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
women <- dplyr::filter(clients, gender == "F")
men <- dplyr::filter(clients, gender == "M")
print("Women Stats")
print(summarise(women,avgAge = mean(age), nbWomen = dplyr::n(), youngest = min(age), oldest = max(age)))
print("Men Stats")
print(summarise(men,avgAge = mean(age), nbMen = dplyr::n(), youngest = min(age), oldest = max(age)))
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
women <- dplyr::filter(clients, gender == "F")
men <- dplyr::filter(clients, gender == "M")
print("Women Stats")
print(summarise(women,nbWomen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age), quantile(age)))
print("Men Stats")
print(summarise(men, nbMen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
women <- dplyr::filter(clients, gender == "F")
men <- dplyr::filter(clients, gender == "M")
print("Women Stats")
print(summarise(women,nbWomen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
# quantile(age)
print("Men Stats")
print(summarise(men, nbMen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
View(clients)
View(loan_train)
library(dplyr)
library(readr)
loans <- read_delim("ficheiros_competicao/loan_train.csv", delim = ";")
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
accounts <- read_delim("ficheiros_competicao/account.csv", delim = ";")
cards <- read_delim("ficheiros_competicao/card_train.csv", delim = ";")
districts <- read_delim("ficheiros_competicao/district.csv", delim = ";")
View(accounts)
View(accounts)
View(cards)
View(cards)
View(districts)
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
women <- dplyr::filter(clients, gender == "F")
men <- dplyr::filter(clients, gender == "M")
print("Women Stats")
print(summarise(women,nbWomen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
# quantile(age)
print("Men Stats")
print(summarise(men, nbMen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
print("Women Stats")
print(summarise(women,nbWomen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
disp <- read_delim("ficheiros_competicao/disp.csv", delim = ";")
View(disp)
df[,disp(client_id,account_id)]
df <- disp[,c("client_id","account_id")]
View(df)
df$gender <- clients$gender[match(df$client_id, clients$client_id)]
View(accounts)
View(accounts)
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
women <- dplyr::filter(clients, gender == "F")
men <- dplyr::filter(clients, gender == "M")
print("Women Stats")
print(summarise(women,nbWomen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
# quantile(age)
print("Men Stats")
print(summarise(men, nbMen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
View(clients)
loans <- read_delim("ficheiros_competicao/loan_train.csv", delim = ";")
accounts <- read_delim("ficheiros_competicao/account.csv", delim = ";")
districts <- read_delim("ficheiros_competicao/district.csv", delim = ";")
disp <- read_delim("ficheiros_competicao/disp.csv", delim = ";")
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
View(clients)
library(dplyr)
library(readr)
loans <- read_delim("ficheiros_competicao/loan_train.csv", delim = ";")
accounts <- read_delim("ficheiros_competicao/account.csv", delim = ";")
districts <- read_delim("ficheiros_competicao/district.csv", delim = ";")
disp <- read_delim("ficheiros_competicao/disp.csv", delim = ";")
# create new dataframe containing all info
dpersonal <- disp[,c("account_id","client_id")]
dpersonal$gender <- clients$gender[match(dpersonal$client_id, clients$client_id)]
dpersonal$birthday <- clients$birthday[match(dpersonal$client_id, clients$client_id)]
dpersonal$age <- clients$age[match(dpersonal$client_id, clients$client_id)]
dpersonal$district_id <- clients$district_id[match(dpersonal$client_id, clients$client_id)]
View(dpersonal)
View(districts)
#district
dpersonal$region <- districts$region[match(dpersonal$district_id, districts$code)]
names(districts)
rename(districts, "code " = "code")
rlang::last_error()
plyr::rename(districts, "code " = "code")
install.packages("plyr")
plyr::rename(districts, "code " = "code")
library(plyr)
plyr::rename(districts, "code " = "code")
library(plyr)
library(dplyr)
library(dplyr)
library(readr)
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
# R adding a column to dataframe based on values in other columns:
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
clients <- clients %>%
mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211110)%/%10000)
####
#women <- dplyr::filter(clients, gender == "F")
#men <- dplyr::filter(clients, gender == "M")
#print("Women Stats")
#print(summarise(women,nbWomen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
# quantile(age)
#print("Men Stats")
#print(summarise(men, nbMen = dplyr::n(), avgAge = mean(age), youngest = min(age), oldest = max(age)))
loans <- read_delim("ficheiros_competicao/loan_train.csv", delim = ";")
accounts <- read_delim("ficheiros_competicao/account.csv", delim = ";")
cards <- read_delim("ficheiros_competicao/card_train.csv", delim = ";")
districts <- read_delim("ficheiros_competicao/district.csv", delim = ";")
disp <- read_delim("ficheiros_competicao/disp.csv", delim = ";")
names(districts)[names(districts) == 'code '] <- 'code'
names(districts)
# fix col names
names(districts)[names(districts) == 'code '] <- 'code'
names(districts)[names(districts) == 'name '] <- 'name'
names(districts)[names(districts) == 'no. of inhabitants'] <- 'nb_inhabitants'
names(districts)[names(districts) == 'no. of cities '] <- 'nb_cities'
names(districts)[names(districts) == 'ratio of urban inhabitants '] <- 'ratio_urban_inhabitants'
names(districts)[names(districts) == 'average salary '] <- 'average_salary'
names(districts)[names(districts) == 'unemploymant rate \'95 ' ] <- 'unemploymant95'
names(districts)[names(districts) == 'unemploymant rate \'96 ' ] <- 'unemploymant96'
names(districts)[names(districts) == 'no. of enterpreneurs per 1000 inhabitants '] <- 'nb_enterpreneurs_per1000'
names(districts)[names(districts) == 'no. of commited crimes \'95 ' ] <- 'crime95'
names(districts)[names(districts) == 'no. of commited crimes \'96 ' ] <- 'crime96'
# create new dataframe containing all info
dpersonal <- disp[,c("account_id","client_id")]
#clients
dpersonal$gender <- clients$gender[match(dpersonal$client_id, clients$client_id)]
dpersonal$birthday <- clients$birthday[match(dpersonal$client_id, clients$client_id)]
dpersonal$age <- clients$age[match(dpersonal$client_id, clients$client_id)]
dpersonal$district_id <- clients$district_id[match(dpersonal$client_id, clients$client_id)]
#district
dpersonal$region <- districts$region[match(dpersonal$district_id, districts$code)]
dpersonal$nb_inhabitants <- districts$nb_inhabitants[match(dpersonal$district_id, districts$code)]
dpersonal$nb_cities <- districts$nb_cities[match(dpersonal$district_id, districts$code)]
dpersonal$ratio_urban_inhabitants <- districts$ratio_urban_inhabitants[match(dpersonal$district_id, districts$code)]
dpersonal$average_salary <- districts$average_salary[match(dpersonal$district_id, districts$code)]
dpersonal$nb_enterpreneurs_per1000 <- districts$nb_enterpreneurs_per1000[match(dpersonal$district_id, districts$code)]
dpersonal$unemploymant95 <- districts$unemploymant95[match(dpersonal$district_id, districts$code)]
dpersonal$crime95 <- districts$crime95[match(dpersonal$district_id, districts$code)]
dpersonal$unemploymant96 <- districts$unemploymant96[match(dpersonal$district_id, districts$code)]
dpersonal$crime96 <- districts$crime96[match(dpersonal$district_id, districts$code)]
View(dpersonal)
#status of loan
dpersonal$status <- loans$status[match(dpersonal$account_id, loans$account_id)]
dpersonal <- na.omit(dpersonal)
# birthdate are actually useless
dpersonal <- subset(dpersonal, select = -birthday)
loans_successful <- dplyr::filter(dpersonal, status == 1)
loans_unsuccessful <- dplyr::filter(dpersonal, status == -1)
print(summarise(loans_successful, nWomen = sum(gender == "F"), avgAge = mean(age)))
print(summarise(loans_successful, nWomen = sum(gender == "M"), avgAge = mean(age)))
print("Successful loans")
print(summarise(loans_successful, nbWomen = sum(gender == "F"), nbMen = sum(gender == "M"), avgAge = mean(age),
avgSalary = mean(average_salary), avgUnemploymantRate95 = mean(unemploymant95),
avgUnemploymantRate96 = mean(unemploymant96), avgCrimeRate95 = mean(crime95), avgCrimeRate96 = mean(crime96)))
names(districts)[names(districts) == 'unemploymant95'] <- 'unemployment95'
names(districts)[names(districts) == 'unemploymant96' ] <- 'unemployment96'
View(dpersonal)
View(dpersonal)
names(dpersonal)[names(dpersonal) == 'unemploymant95'] <- 'unemployment95'
names(dpersonal)[names(dpersonal) == 'unemploymant96' ] <- 'unemployment96'
View(dpersonal)
View(dpersonal)
# unemployment and crime rate from '95 are stored as char instead of numeric
transform(dpersonal, unemployment95 = as.numeric(unemployment95), crime95 = as.numeric(crime95))
loans_successful <- dplyr::filter(dpersonal, status == 1)
loans_unsuccessful <- dplyr::filter(dpersonal, status == -1)
print("Successful loans")
print(summarise(loans_successful, nbWomen = sum(gender == "F"), nbMen = sum(gender == "M"), avgAge = mean(age),
avgSalary = mean(average_salary), avgUnemploymantRate95 = mean(unemploymant95),
avgUnemploymantRate96 = mean(unemploymant96), avgCrimeRate95 = mean(crime95), avgCrimeRate96 = mean(crime96)))
loans_successful <- dplyr::filter(dpersonal, status == 1)
loans_unsuccessful <- dplyr::filter(dpersonal, status == -1)
print("Successful loans")
print(summarise(loans_successful, nbWomen = sum(gender == "F"), nbMen = sum(gender == "M"), avgAge = mean(age),
avgSalary = mean(average_salary), avgUnemploymentRate95 = mean(unemployment95),
avgUnemploymentRate96 = mean(unemployment96), avgCrimeRate95 = mean(crime95), avgCrimeRate96 = mean(crime96)))
loans_successful <- dplyr::filter(dpersonal, status == 1)
loans_unsuccessful <- dplyr::filter(dpersonal, status == -1)
print("Successful loans")
print(summarise(loans_successful, nbWomen = sum(gender == "F"), nbMen = sum(gender == "M"), avgAge = mean(age),
avgSalary = mean(average_salary), avgUnemploymentRate95 = mean(unemployment95, na.rm=TRUE),
avgUnemploymentRate96 = mean(unemployment96), avgCrimeRate95 = mean(crime95, na.rm=TRUE), avgCrimeRate96 = mean(crime96)))
# unemployment and crime rate from '95 are stored as char instead of numeric
transform(dpersonal, unemployment95 = as.numeric(unemployment95), crime95 = as.numeric(crime95))
View(dpersonal)
View(districts)
View(loans)
View(loans)
library(dplyr)
library(readr)
# Reading all files
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
loans <- read_delim("ficheiros_competicao/loan_train.csv", delim = ";")
accounts <- read_delim("ficheiros_competicao/account.csv", delim = ";")
cards <- read_delim("ficheiros_competicao/card_train.csv", delim = ";")
districts <- read_delim("ficheiros_competicao/district.csv", delim = ";")
disp <- read_delim("ficheiros_competicao/disp.csv", delim = ";")
# Cleaning Client Dataframe
# Decomposing birthnumber into gender and age
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
# birthday is actually useless for data mining / processing purposes
#clients <- clients %>%
#mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211112)%/%10000)
# Cleaning District Dataframe
# Fixing Column Names
names(districts)[names(districts) == 'code '] <- 'code'
names(districts)[names(districts) == 'name '] <- 'name'
names(districts)[names(districts) == 'no. of inhabitants'] <- 'nb_hab'
names(districts)[names(districts) == 'no. of cities '] <- 'nb_cities'
names(districts)[names(districts) == 'ratio of urban inhabitants '] <- 'ratio_urban_hab'
names(districts)[names(districts) == 'average salary '] <- 'avg_salary'
names(districts)[names(districts) == 'unemploymant rate \'95 ' ] <- 'unemployment95'
names(districts)[names(districts) == 'unemploymant rate \'96 ' ] <- 'unemployment96'
names(districts)[names(districts) == 'no. of enterpreneurs per 1000 inhabitants '] <- 'nb_enterpreneurs_per1000'
names(districts)[names(districts) == 'no. of commited crimes \'95 ' ] <- 'crime95'
names(districts)[names(districts) == 'no. of commited crimes \'96 ' ] <- 'crime96'
# Unemployment and Crime Rate from '95 are stored as Char instead of Numeric
transform(districts, unemployment95 = as.numeric(as.character(unemployment95)), crime95 = as.numeric(as.character(crime95)))
View(districts)
# Unemployment and Crime Rate from '95 are stored as Char instead of Numeric
#transform(districts, unemployment95 = as.numeric(as.character(unemployment95)), crime95 = as.numeric(as.character(crime95)))
transform(districts, umemployment95 = as.numeric(unemployment95))
sapply(districts, class)
# Unemployment and Crime Rate from '95 are stored as Char instead of Numeric
#transform(districts, unemployment95 = as.numeric(as.character(unemployment95)), crime95 = as.numeric(as.character(crime95)))
#transform(districts, umemployment95 = as.numeric(unemployment95))
as.numeric(as.character(districts$umemployment95))
# Unemployment and Crime Rate from '95 are stored as Char instead of Numeric
#transform(districts, unemployment95 = as.numeric(as.character(unemployment95)), crime95 = as.numeric(as.character(crime95)))
#transform(districts, unemployment95 = as.numeric(unemployment95))
as.numeric(as.character(districts$unemployment95))
View(districts)
View(districts)
library(dplyr)
library(magrittr)
districts %<>%
mutate_each(funs(if(is.integer(.)) as.numeric(.) else .))
districts[sapply(districts, is.integer)] <-lapply(districts[sapply(districts, is.integer)], as.numeric)
df <- districts[,c("unemployment95","crime95")]
View(df)
df[sapply(df, is.character)] <-lapply(df[sapply(df, is.character)], as.numeric)
districts$unemployment95 <- df$unemployment95
districts$crime95 <- df$crime95
rm(df)
# Add unemployment and crime rate evolution
districts <- districts %>%
mutate(unemployment_rate = ((unemployment95-unemployment96)/unemployment95)*100 )
districts <- districts %>%
mutate(crime_rate = ((crime95-crime96)/crime95)*100 )
# Add unemployment and crime rate evolution
districts <- districts %>%
mutate(unemployment_rate = ((unemployment96-unemployment95)/unemployment96)*100 )
districts <- districts %>%
mutate(crime_rate = ((crime96-crime95)/crime96)*100 )
# Add unemployment and crime rate evolution
districts <- districts %>%
mutate(unemployment_rate = ((unemployment96-unemployment95)/unemployment95)*100 )
districts <- districts %>%
mutate(crime_rate = ((crime96-crime95)/crime95)*100 )
# Standardize Crime Values (normalization)
districts$crime95_Standardized <- (districts$crime95 - mean(districts$crime95)) / sd(idistricts$crime95)
districts$crime96_Standardized <- (districts$crime96 - mean(districts$crime96)) / sd(idistricts$crime96)
# Standardize Crime Values (normalization)
districts$crime95_Standardized <- (districts$crime95 - mean(districts$crime95)) / sd(districts$crime95)
districts$crime96_Standardized <- (districts$crime96 - mean(districts$crime96)) / sd(districts$crime96)
districts <- subset(districts, select = -crime95_Standardized )
districts <- subset(districts, select = -crime96_Standardized )
df <- districts %>% mutate_each_(list(~scale(.) %>% as.vector),
vars = c("crime95","crime96"))
View(df)
View(df)
# Normalize Crime Values
districts$crime95_Norm <- districts$crime95 / districts$nb_hab
districts$crime96_Norm <- districts$crime96 / districts$nb_hab
sumPopulation <- sum(districts$nb_hab)
sumCrime95 <- sum(districts$crime95)
sumCrime96 <- sum(districts$crime96)
districts$crime96_Perc <- (districts$crime96 * 100) / sumCrime96
View(df)
View(df)
View(df)
library(dplyr)
library(readr)
# Reading all files
clients <- read_delim("ficheiros_competicao/client.csv", delim = ";")
loans <- read_delim("ficheiros_competicao/loan_train.csv", delim = ";")
accounts <- read_delim("ficheiros_competicao/account.csv", delim = ";")
cards <- read_delim("ficheiros_competicao/card_train.csv", delim = ";")
districts <- read_delim("ficheiros_competicao/district.csv", delim = ";")
disp <- read_delim("ficheiros_competicao/disp.csv", delim = ";")
# Cleaning Client Dataframe
# Decomposing birthnumber into gender and age
clients <- clients %>%
mutate(gender = if_else((birth_number%%10000) > 1231, "F", "M"))
# birthday is actually useless for data mining / processing purposes
#clients <- clients %>%
#mutate(birthday = if_else(gender == "M", birth_number, birth_number-5000))
clients <- clients %>%
mutate(age = -(birth_number+19000000-20211112)%/%10000)
# Cleaning District Dataframe
# Fixing Column Names
names(districts)[names(districts) == 'code '] <- 'code'
names(districts)[names(districts) == 'name '] <- 'name'
names(districts)[names(districts) == 'no. of inhabitants'] <- 'nb_hab'
names(districts)[names(districts) == 'no. of cities '] <- 'nb_cities'
names(districts)[names(districts) == 'ratio of urban inhabitants '] <- 'ratio_urban_hab'
names(districts)[names(districts) == 'average salary '] <- 'avg_salary'
names(districts)[names(districts) == 'unemploymant rate \'95 ' ] <- 'unemployment95'
names(districts)[names(districts) == 'unemploymant rate \'96 ' ] <- 'unemployment96'
names(districts)[names(districts) == 'no. of enterpreneurs per 1000 inhabitants '] <- 'nb_enterpreneurs_per1000'
names(districts)[names(districts) == 'no. of commited crimes \'95 ' ] <- 'crime95'
names(districts)[names(districts) == 'no. of commited crimes \'96 ' ] <- 'crime96'
# Unemployment and Crime Rate from '95 are stored as Characters instead of Numeric values
df <- districts[,c("unemployment95","crime95")]
df[sapply(df, is.character)] <-lapply(df[sapply(df, is.character)], as.numeric)
districts$unemployment95 <- df$unemployment95
districts$crime95 <- df$crime95
rm(df)
# Standardize Crime Values (normalization)
districts$crime95_Standardized <- (districts$crime95 - mean(districts$crime95)) / sd(districts$crime95)
districts$crime96_Standardized <- (districts$crime96 - mean(districts$crime96)) / sd(districts$crime96)
View(districts)
colMeans(districts, na.rm = TRUE, dims = 1)
# Standardize Crime Values (normalization)
districts$crime95_Standardized <- (districts$crime95 - mean(districts$crime95, na.rm = TRUE)) / sd(districts$crime95, na.rm = TRUE)
districts$crime96_Standardized <- (districts$crime96 - mean(districts$crime96, na.rm = TRUE)) / sd(districts$crime96, na.rm = TRUE)
# create new dataframe containing all info
df <- disp[,c("account_id","client_id")]
View(accounts)
View(accounts)
View(disp)
View(disp)
# Check if any client has more to one account to their name
sum(duplicated(disp$client_id))
#loans
df$status <- loans$status[match(df$account_id, loans$account_id)]
# removing clients who haven't requested any loans
df <- na.omit(df)
# Standardize Crime Values (normalization)
#districts$crime95_Standardized <- (districts$crime95 - mean(districts$crime95, na.rm = TRUE)) / sd(districts$crime95, na.rm = TRUE)
#districts$crime96_Standardized <- (districts$crime96 - mean(districts$crime96, na.rm = TRUE)) / sd(districts$crime96, na.rm = TRUE)
districts$crime95_Standardized <- (districts$crime95 / districts$nb_hab)
districts$crime96_Standardized <- (districts$crime96 / districts$nb_hab)
#district
df$region <- districts$region[match(df$district_id, districts$code)]
df$nb_inhabitants <- districts$nb_hab[match(df$district_id, districts$code)]
df$nb_cities <- districts$nb_cities[match(df$district_id, districts$code)]
df$ratio_urban_inhabitants <- districts$ratio_urban_hab[match(df$district_id, districts$code)]
df$average_salary <- districts$avg_salary[match(df$district_id, districts$code)]
View(df)
View(df)
#clients
df$gender <- clients$gender[match(df$client_id, clients$client_id)]
df$age <- clients$age[match(df$client_id, clients$client_id)]
df$district_id <- clients$district_id[match(df$client_id, clients$client_id)]
#loans
df$status <- loans$status[match(df$account_id, loans$account_id)]
# removing clients who haven't requested any loans
df <- na.omit(df)
#district
df$region <- districts$region[match(df$district_id, districts$code)]
df$nb_inhabitants <- districts$nb_hab[match(df$district_id, districts$code)]
df$nb_cities <- districts$nb_cities[match(df$district_id, districts$code)]
df$ratio_urban_inhabitants <- districts$ratio_urban_hab[match(df$district_id, districts$code)]
df$average_salary <- districts$avg_salary[match(df$district_id, districts$code)]
df$nb_enterpreneurs_per1000 <- districts$nb_enterpreneurs_per1000[match(df$district_id, districts$code)]
df$unemployment95 <- districts$unemployment95[match(df$district_id, districts$code)]
#df$crime95 <- districts$crime95[match(df$district_id, districts$code)]
df$crime95_S <- districts$crime95_Standardized[match(df$district_id, districts$code)]
df$unemployment96 <- districts$unemployment96[match(df$district_id, districts$code)]
#df$crime96 <- districts$crime96[match(df$district_id, districts$code)]
df$crime96_S <- districts$crime96_Standardized[match(df$district_id, districts$code)]
View(accounts)
View(accounts)
930212%/%100
# Cleaning Account Dataframe
# Simplifying creation date into MMYY only
accounts <- accounts %>%
mutate(account_creation_date = date%/%100)
#accounts
df$account_creation_date <- accounts$account_creation_date[match(df$account_id, accounts$account_id)]
df$account_freq_access <- accounts$frequency[match(df$account_id, accounts$account_id)]
View(cards)
df$disp_id <- disp$disp_id[match(df$client_id, disp$client_id)
df$disp_id <- disp$disp_id[match(df$client_id, disp$client_id)]
df$disp_id <- disp$disp_id[match(df$client_id, disp$client_id)]
# Cleaning Card Dataframe
# Simplifying creation date into MMYY only
cards <- cards %>%
mutate(card_issue_date = date%/%100)
# Cleaning Card Dataframe
# Simplifying creation date into MMYY only
cards <- cards %>%
mutate(card_issue_date = issued%/%100)
# disp_id is now useless
df <- subset(df, select = -disp_id )
save.image("C:/Users/xanaf/Desktop/feup/4 ano/1 semestre/ac/r set up.RData")
